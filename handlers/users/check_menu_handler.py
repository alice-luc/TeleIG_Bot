from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from keyboards.default import check_menu_buttons, menu_buttons
from loader import dp, db
from aiogram import types
from states import MenuState, CheckState
import threading

from utils.misc import rate_limit


@rate_limit(1, '–ù–∞–∑–∞–¥')
@dp.message_handler(state=CheckState, text='–ù–∞–∑–∞–¥')
async def back_activating(message: types.Message):
    """
    goes back to menu
    :param message:
    """
    await MenuState.M1.set()
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu_buttons)


@rate_limit(5, '–£–∑–Ω–∞—Ç—å, –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç')
@dp.message_handler(state=CheckState.C1, text='–£–∑–Ω–∞—Ç—å, –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –≤ –æ—Ç–≤–µ—Ç')
async def rats_check_activating(message: types.Message):
    """
    sets the state ad asks for auth data
    :param message:
    """
    await CheckState.C2.set()
    await message.answer('–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\
\n‚õîÔ∏è–î–∞–Ω–Ω—ã–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ \
—Å–∏—Å—Ç–µ–º–µ. \n–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å–æ–≤–µ—Ç—É—é —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')


@rate_limit(5, '–û—Ç–ø–∏—Å–∞—Ç—å –±–æ—Ç–æ–≤')
@dp.message_handler(state=CheckState.C1, text='–û—Ç–ø–∏—Å–∞—Ç—å –±–æ—Ç–æ–≤')
async def bots_block_activating(message: types.Message):
    """
    sets the state ad asks for auth data

    :param message:
    """
    await CheckState.C3.set()
    await message.answer('–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@rate_limit(5, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')
@dp.message_handler(state=MenuState.M2, text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')
async def check_activating(message: types.Message):
    """
        sets the state ad asks for the further action


    :param message:
    """
    await CheckState.C1.set()
    await message.answer('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?', reply_markup=check_menu_buttons)


@dp.message_handler(state=CheckState.C2)
async def rats_detecting_start(message: types.Message, state: FSMContext):
    """
    returns list of follows that dont follow the consumer back
    :param message:
    :param state:
    """
    from IgSide.Server.check_bot import rats_detection
    login = message.text.split(' ')[-1]
    tg_id = message.from_user.id
    await state.finish()
    if db.check_membership(tg_id, login):
        rats = rats_detection(login)
        if rats:
            await message.answer('üí©\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä—ã—Å—ë–Ω—ã—à–µ–π, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç:')
            await message.answer('\n'.join(rats))
        else:
            await message.answer('–õ–∏–±–æ —É —Ç–µ–±—è –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –ª–∏–±–æ —Ç—ã –∑–∞–±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n\
–ö—Ä—ã—Å—ë–Ω—ã—à–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æüëçüèª')


@dp.message_handler(state=CheckState.C3)
async def login_unfollow_activating(message: types.Message):
    """
    when data is given it goes to ig_bot and runs the unfollowing algorithm
    :param message:
    """
    from IgSide.Server import unfollow_bots_start
    from handlers.users.subscription_handler import notifying
    login = message.text
    tg_id = message.from_user.id
    await MenuState.M1.set()
    if db.check_membership(tg_id, login):
        threading.Thread(target=unfollow_bots_start, args=(login, tg_id)).start()
        from config import admins
        await notifying(admins[0], f'–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É {login}')
        await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n–Ø –Ω–∞—á–∞–ª —á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç –±–æ—Ç–æ–≤. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á—É, –¥–∞–º –∑–Ω–∞—Ç—å!',
                             reply_markup=menu_buttons)
    else:
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ü•∫\n\
–û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É <a href="https://www.tinkoff.ru/rm/khvorostova.alisa1/RluPE17867">–ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a> –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë \
—Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.', reply_markup=menu_buttons, parse_mode=ParseMode.HTML)


#
# @dp.message_handler(state=CheckState.C2)
# async def login_check_activating(message: types.Message):
#     """
#
#     :param message:
#     """
#     login = message.text
#     await MenuState.M1.set()
#     await message.answer('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ ', login,
#                          reply_markup=menu_buttons)
