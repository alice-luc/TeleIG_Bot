import threading

from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from data.config import admins
from keyboards.default import like_menu_buttons, menu_buttons, start_menu_buttons
from loader import dispatcher, data_base
from aiogram import types
from states import LikeState, MenuState
from utils.misc import rate_limit
from handlers.users.subscription_handler import notifying


@rate_limit(1, '–ù–∞–∑–∞–¥')
@dispatcher.message_handler(state=LikeState, text='–ù–∞–∑–∞–¥')
async def back_activating(message: types.Message):
    """
    if user chose back option
    """
    await MenuState.M1.set()
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å–∏–≤–∏–µ', reply_markup=menu_buttons)


@dispatcher.message_handler(state=LikeState.Li2)
async def taking_datas_for_likes(message: types.Message):
    """
    starts ig-side code which likes followers of consumer's followers
    """
    from IgSide.Server import like_start
    login = message.text.split(' ')[0]
    tg_id = message.from_user.id
    await MenuState.M1.set()
    membership = data_base.check_membership(tg_id, login)
    if membership != 0:
        await notifying(admins[0], f'–õ–∞–π–∫–∏ –ø–æ–µ—Ö–∞–ª–∏ {login}')
        threading.Thread(target=like_start, args=(login,)).start()
        await message.answer(f'‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ—à–µ–ª!\
–Ø –Ω–∞—á–∞–ª —Ä–∞–∑–¥–∞–≤–∞—Ç—å –ª–∞–π–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {login}\
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤, –Ω–∞–ø–∏—à–∏ @alohayoung')
    else:
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ü•∫\n\
–û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É <a href="https://www.tinkoff.ru/rm/khvorostova.alisa1/RluPE17867">–ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a> –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë \
—Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.', reply_markup=menu_buttons, parse_mode=ParseMode.HTML)


@dispatcher.message_handler(state=LikeState.Li3)
async def dif_consuming_data_for_likes(message: types.Message, state: FSMContext):
    """
    another method of likes is to go to hashtags' posts
    """
    from IgSide.Server import like_start
    login = message.text.split(' ')[0]
    hashtags_list = message.text.split(' ')[1:]
    tg_id = message.from_user.id
    await state.finish()
    print(login, hashtags_list)
    membership = data_base.check_membership(tg_id, login)
    print(membership)
    if membership != 0:
        print(data_base.ig_select_user(tg_id, login))
        await notifying(admins[0], f'–õ–∞–π–∫–∏ –ø–æ–µ—Ö–∞–ª–∏ {login}')
        try:
            threading.Thread(target=like_start, args=(login,)).start()
        except:
            pass
        await message.answer(f'‚úÖ\n–ó–∞–ø—É—â–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –ª–∞–π–∫–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –∏ —Ö—ç—à—Ç–µ–≥–∞–º —Å –∞–∫–∫–∞—É–Ω—Ç–∞{login}',
                             reply_markup=start_menu_buttons)
    else:
        await MenuState.M1.set()
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ü•∫\n\
–û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É <a href="https://www.tinkoff.ru/rm/khvorostova.alisa1/RluPE17867">–ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a> –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë \
—Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.', reply_markup=menu_buttons, parse_mode=ParseMode.HTML)


@rate_limit(5, '–î—Ä—É–∑–µ–π –¥—Ä—É–∑–µ–π')
@dispatcher.message_handler(state=LikeState.Li1, text='–î—Ä—É–∑–µ–π –¥—Ä—É–∑–µ–π')
async def choosing_the_method_of_likes(message: types.Message):
    """
    asks for a login to begin likes method
    """
    await LikeState.Li2.set()
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\
–ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')


@rate_limit(5, '–•—ç—à—Ç–µ–≥–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏')
@dispatcher.message_handler(state=LikeState.Li1, text='–•—ç—à—Ç–µ–≥–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏')
async def choosing_the_method_of_likes1(message: types.Message):
    """
    collects hashtags' list within the next message
    """
    await LikeState.Li3.set()
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ —Å–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ "–ù–∞–∑–∞–¥"\
–¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–õ–æ–∫–∞—Ü–∏–∏ –≤–≤–æ–¥–∏ —Ü–µ–ª—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏,–∞ —Ö—ç—à—Ç—ç–≥–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ\
\n‚õîÔ∏è–î–∞–Ω–Ω—ã–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ \
—Å–∏—Å—Ç–µ–º–µ. \n–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å–æ–≤–µ—Ç—É—é —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')


@rate_limit(5, '–†–∞–∑–¥–∞–≤–∞—Ç—å –ª–∞–π–∫–∏')
@dispatcher.message_handler(state=MenuState.M2, text='–†–∞–∑–¥–∞–≤–∞—Ç—å –ª–∞–π–∫–∏')
async def like_activating(message: types.Message):
    """
    determines a method of likes that will be used
    """
    await LikeState.Li1.set()
    await message.answer('–ö–∞–∫ –±—É–¥–µ–º –ª–∞–π–∫–∞—Ç—å?', reply_markup=like_menu_buttons)


# async def run_ig_side(func, *args):
#     loop = asyncio.get_running_loop()
#     with concurrent.futures.ThreadPoolExecutor() as pool:
#         result = await loop.run_in_executor(
#             pool, func, *args
#         )
#     return result
#
# @dp.message_handler(state=LikeState.Li4)
# async def taking_datas_for_likes(message: types.Message, state: FSMContext):
#     hashtags_list = message.text.split(' ')
#     tg_id = message.from_user.id
#     login = (await state.get_data()).get('login')
#     await state.finish()
#     await message.answer('–ó–∞–ø—É—â–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –ª–∞–π–∫–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –∏ —Ö—ç—à—Ç–µ–≥–∞–º —Å –∞–∫–∫–∞—É–Ω—Ç–∞', login)
